import React, { useEffect, useRef, useState } from 'react';
import { View, StyleSheet, Platform, Text } from 'react-native';
// Importamos epubjs directamente (compatible con Webpack)
import ePub from 'epubjs';
import type { Book, Rendition, Location } from 'epubjs';

interface WebEpubReaderProps {
  url: string;
  blob?: Blob;
  arrayBuffer?: ArrayBuffer;
  onLocationChange?: (location: string) => void;
}

const WebEpubReader: React.FC<WebEpubReaderProps> = ({ url, blob, arrayBuffer, onLocationChange }) => {
  const viewerRef = useRef<HTMLDivElement>(null);
  const bookRef = useRef<Book | null>(null);
  const renditionRef = useRef<Rendition | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const [isReady, setIsReady] = useState<boolean>(false);
  const hasAttempedLoad = useRef<boolean>(false);

  useEffect(() => {
    if (!url && !blob && !arrayBuffer) return;
    if (Platform.OS !== 'web') return;
    
    // Evitar cargas duplicadas
    if (hasAttempedLoad.current && bookRef.current) return;
    hasAttempedLoad.current = true;

    console.log('URL del EPUB recibida:', url);
    console.log('Blob disponible:', blob ? 'Sí' : 'No');
    console.log('ArrayBuffer disponible:', arrayBuffer ? 'Sí' : 'No');
    
    // Función para cargar y renderizar el EPUB
    const loadEpub = async () => {
      try {
        setIsLoading(true);
        setError(null);
        
        // Limpiar cualquier contenido previo
        if (viewerRef.current) {
          viewerRef.current.innerHTML = '';
        }
        
        // Crear una nueva instancia del libro usando el método más adecuado
        let bookInstance: Book;
        
        try {
          // Preferimos usar ArrayBuffer por compatibilidad
          if (arrayBuffer) {
            console.log('Iniciando carga del EPUB desde ArrayBuffer');
            
            // Crear un Blob desde ArrayBuffer si es necesario
            const arrayBufferBlob = new Blob([arrayBuffer], { type: 'application/epub+zip' });
            const arrayBufferUrl = URL.createObjectURL(arrayBufferBlob);
            console.log('URL creada desde ArrayBuffer:', arrayBufferUrl);
            
            // Intentar crear el libro desde la URL creada del ArrayBuffer
            bookInstance = ePub(arrayBufferUrl);
          } 
          // Segunda opción: usar Blob directamente
          else if (blob) {
            console.log('Iniciando carga del EPUB desde Blob');
            
            // Asegurarnos de que el Blob tenga el tipo MIME correcto
            const epubBlob = blob.type === 'application/epub+zip' 
              ? blob 
              : new Blob([await blob.arrayBuffer()], { type: 'application/epub+zip' });
            
            // Crear una URL desde el Blob
            const blobUrl = URL.createObjectURL(epubBlob);
            console.log('URL creada desde Blob:', blobUrl);
            
            // Crear el libro desde la URL del Blob
            bookInstance = ePub(blobUrl);
          } 
          // Última opción: usar la URL directamente
          else if (url) {
            console.log('Iniciando carga del EPUB desde URL:', url);
            
            // Validar que la URL es válida
            if (!url.startsWith('blob:') && !url.startsWith('http')) {
              throw new Error('URL del EPUB no válida');
            }
            
            // Intentar cargar directamente
            bookInstance = ePub(url);
          } else {
            throw new Error('No se proporcionó ningún método válido para cargar el EPUB');
          }
        } catch (initError) {
          console.error('Error al inicializar el libro:', initError);
          
          // Intento de recuperación: intentar cargar usando fetch directamente
          if (url && (url.startsWith('http') || url.startsWith('blob:'))) {
            console.log('Intento alternativo: cargando mediante fetch desde URL:', url);
            
            try {
              const response = await fetch(url);
              if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
              
              const epubArrayBuffer = await response.arrayBuffer();
              const epubBlob = new Blob([epubArrayBuffer], { type: 'application/epub+zip' });
              const newBlobUrl = URL.createObjectURL(epubBlob);
              
              console.log('URL alternativa creada:', newBlobUrl);
              bookInstance = ePub(newBlobUrl);
            } catch (fetchError) {
              const errorMessage = fetchError instanceof Error ? fetchError.message : 'Error desconocido';
              console.error('Error en intento alternativo:', errorMessage);
              throw new Error(`Error al cargar el EPUB: ${errorMessage}`);
            }
          } else {
            throw initError;
          }
        }
        
        bookRef.current = bookInstance;
        
        // Registrar evento para debug
        bookInstance.on('openFailed', (error: any) => {
          console.error('Error al abrir el EPUB:', error);
          setError('Error al abrir el EPUB: ' + (error.message || 'Error desconocido'));
          setIsLoading(false);
        });
        
        // Esperar a que el libro esté listo
        await bookInstance.ready;
        console.log('Libro EPUB listo para renderizar');
        
        // Crear un nuevo rendition
        if (!viewerRef.current) {
          throw new Error('El contenedor de renderizado no está disponible');
        }
        
        const rendition = bookInstance.renderTo(viewerRef.current, {
          width: '100%',
          height: '100%',
          spread: 'auto',
          flow: 'paginated'
        });
          
        renditionRef.current = rendition;
        
        // Configurar eventos de localización
        rendition.on('locationChanged', (location: Location) => {
          if (onLocationChange) {
            onLocationChange(location.start.cfi);
          }
        });
        
        // Mostrar la primera página
        await rendition.display();
        console.log('EPUB renderizado correctamente');
        
        setIsLoading(false);
        setIsReady(true);
      } catch (err: any) {
        console.error('Error al cargar el EPUB:', err);
        setError('Error al cargar el EPUB: ' + (err.message || 'Error desconocido'));
        setIsLoading(false);
      }
    };
    
    // Iniciar la carga del EPUB
    loadEpub();
    
    // Limpieza al desmontar
    return () => {
      if (renditionRef.current) {
        try {
          renditionRef.current.destroy();
        } catch (e) {
          console.error('Error al destruir el rendition:', e);
        }
      }
      
      if (bookRef.current) {
        try {
          bookRef.current.destroy();
        } catch (e) {
          console.error('Error al destruir el libro:', e);
        }
      }
    };
  }, [url, blob, arrayBuffer, onLocationChange]);

  // Controles de navegación
  const goNext = () => {
    if (renditionRef.current) {
      renditionRef.current.next();
    }
  };

  const goPrevious = () => {
    if (renditionRef.current) {
      renditionRef.current.prev();
    }
  };

  // Si no estamos en web, mostramos un mensaje
  if (Platform.OS !== 'web') {
    return (
      <View style={styles.container}>
        <Text>El lector web de EPUB solo está disponible en la versión web.</Text>
      </View>
    );
  }

  return (
    <View style={styles.container}>
      {isLoading && (
        <View style={styles.loadingContainer}>
          <Text style={styles.loadingText}>Cargando EPUB...</Text>
          <Text style={styles.debugText}>URL: {url ? url.substring(0, 30) + '...' : 'No disponible'}</Text>
          <Text style={styles.debugText}>Método: {arrayBuffer ? 'ArrayBuffer' : blob ? 'Blob' : 'URL'}</Text>
        </View>
      )}
      
      {error && (
        <View style={styles.errorContainer}>
          <Text style={styles.errorText}>{error}</Text>
          <button 
            onClick={() => { hasAttempedLoad.current = false; window.location.reload(); }} 
            style={styles.retryButton}
          >
            Reintentar
          </button>
        </View>
      )}
      
      <div 
        ref={viewerRef} 
        style={{
          width: '100%',
          height: '90%',
          backgroundColor: '#f9f9f9',
          display: isLoading ? 'none' : 'block', // Ocultar mientras carga
          border: '1px solid #ddd',
          overflow: 'hidden',
        }} 
        data-testid="epub-viewer-container"
      />
      
      {isReady && (
        <View style={styles.navigationContainer}>
          <button onClick={goPrevious} style={styles.navButton}>Anterior</button>
          <Text style={styles.statusText}>Libro cargado correctamente</Text>
          <button onClick={goNext} style={styles.navButton}>Siguiente</button>
        </View>
      )}
      
      {!isLoading && !isReady && !error && (
        <View style={styles.waitingContainer}>
          <Text style={styles.waitingText}>Preparando visualización...</Text>
        </View>
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    position: 'relative',
  },
  epubViewerWeb: {
    width: '100%',
    height: '90%',
    backgroundColor: '#f9f9f9',
  },
  loadingContainer: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'rgba(255, 255, 255, 0.8)',
    zIndex: 10,
  },
  loadingText: {
    fontSize: 16,
    color: '#333',
    textAlign: 'center',
    marginBottom: 10,
  },
  debugText: {
    fontSize: 12,
    color: '#888',
    textAlign: 'center',
  },
  errorContainer: {
    padding: 20,
    backgroundColor: '#fee',
    margin: 10,
    borderRadius: 5,
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
  },
  errorText: {
    color: 'red',
    marginBottom: 15,
  },
  retryButton: {
    padding: 10,
    backgroundColor: '#ff6b6b',
    color: 'white',
    borderRadius: 5,
    cursor: 'pointer',
    border: 'none',
  },
  navigationContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    padding: 10,
    backgroundColor: '#f0f0f0',
    height: '10%',
    alignItems: 'center',
  },
  navButton: {
    padding: 10,
    backgroundColor: '#007AFF',
    color: 'white',
    borderRadius: 5,
    cursor: 'pointer',
    border: 'none',
    margin: 5,
  },
  statusText: {
    color: '#28a745',
    fontSize: 14,
    textAlign: 'center',
  },
  waitingContainer: {
    padding: 20,
    backgroundColor: '#fffde7',
    margin: 10,
    borderRadius: 5,
    alignItems: 'center',
  },
  waitingText: {
    color: '#ff9800',
    fontSize: 14,
    textAlign: 'center',
  },
});

export default WebEpubReader;
